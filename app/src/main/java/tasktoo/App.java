/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tasktoo;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class App {
    private static List<Record> parseXmlFile(String filePath) {
        List<Record> records = new ArrayList<>();

        try {
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();

            DefaultHandler handler = new DefaultHandler() {
                Record record = null;
                StringBuilder data = null;

                public void startElement(String uri, String localName,String qName, Attributes attributes) throws SAXException {
                    if (qName.equalsIgnoreCase("record")) {
                        record = new Record();
                        records.add(record);
                    } else {
                        data = new StringBuilder();
                    }
                }

                public void characters(char ch[], int start, int length) throws SAXException {
                    if (data != null) {
                        data.append(new String(ch, start, length));
                    }
                }

                public void endElement(String uri, String localName, String qName) throws SAXException {
                    if (qName.equalsIgnoreCase("name")) {
                        record.setName(data.toString());
                    } else if (qName.equalsIgnoreCase("postalZip")) {
                        record.setPostalZip(data.toString());
                    } else if (qName.equalsIgnoreCase("region")) {
                        record.setRegion(data.toString());
                    } else if (qName.equalsIgnoreCase("country")) {
                        record.setCountry(data.toString());
                    } else if (qName.equalsIgnoreCase("address")) {
                        record.setAddress(data.toString());
                    } else if (qName.equalsIgnoreCase("list")) {
                        record.setList(data.toString());
                    }
                }
            };

            saxParser.parse(new File(filePath), handler);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return records;
    }

    public static void main(String[] args) {
        String[] fields = { "Name", "Postal Zip", "Region", "Country", "Address", "List" };
        Set<String> fieldSet = new HashSet<>(Arrays.asList(fields));

        Scanner scanner = new Scanner(System.in);
        System.out.println("Please select the fields you would like to see for each record, your options are: " + String.join(", ", fields));

        String userInput = scanner.nextLine();
        String[] selectedFields = userInput.split(",");

        List<String> validFields = new ArrayList<>();
        for (String field : selectedFields) {
            String trimmedField = field.trim();
            if (!trimmedField.isEmpty() && fieldSet.contains(trimmedField)) {
                validFields.add(trimmedField);
            } else {
                System.out.println("Invalid field: " + trimmedField);
            }
        }

        String filePath = "D:\\tasktoo\\app\\src\\main\\resources\\data.xml";
        List<Record> records = parseXmlFile(filePath);
        StringBuilder output = new StringBuilder();
        output.append("{\n  \"records\": [\n");
        for (Record record : records) {
            output.append("    {\n");
            for (String field : validFields) {
