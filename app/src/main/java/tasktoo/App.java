/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tasktoo;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class App {
    private static List<Record> parseXmlFile(String filePath) {
        List<Record> records = new ArrayList<>();
    
        try {
            File file = new File(filePath);
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(file);
    
            NodeList nodeList = doc.getElementsByTagName("record");
    
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
    
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;
    
                    Record record = new Record();
                    record.setName(element.getElementsByTagName("name").item(0).getTextContent());
                    record.setPostalZip(element.getElementsByTagName("postalZip").item(0).getTextContent());
                    record.setRegion(element.getElementsByTagName("region").item(0).getTextContent());
                    record.setCountry(element.getElementsByTagName("country").item(0).getTextContent());
                    record.setAddress(element.getElementsByTagName("address").item(0).getTextContent());
                    record.setList(element.getElementsByTagName("list").item(0).getTextContent());
    
                    records.add(record);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        return records;
    }
    
    public static void main(String[] args) {
        String[] fields = { "Name", "Postal Zip", "Region", "Country", "Address", "List" };
        Set<String> fieldSet = new HashSet<>(Arrays.asList(fields));
    
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please select the fields you would like to see for each record, your options are: " + String.join(", ", fields));
    
        String userInput = scanner.nextLine();
        String[] selectedFields = userInput.split(",");
    
        List<String> validFields = new ArrayList<>();
        for (String field : selectedFields) {
            String trimmedField = field.trim();
            if (!trimmedField.isEmpty() && fieldSet.contains(trimmedField)) {
                validFields.add(trimmedField);
            } else {
                System.out.println("Invalid field: " + trimmedField);
            }
        }
    
        String filePath = "data.xml";
        List<Record> records = parseXmlFile(filePath);
        StringBuilder output = new StringBuilder();
        output.append("{\n  \"records\": [\n");
        for (Record record : records) {
            output.append("    {\n");
            for (String field : validFields) {
                switch (field) {
                    case "Name":
                        output.append("      \"Name\": \"" + record.getName() + "\",\n");
                        break;
                    case "Postal Zip":
                        output.append("      \"Postal Zip\": \"" + record.getPostalZip() + "\",\n");
                        break;
                    case "Region":
                        output.append("      \"Region\": \"" + record.getRegion() + "\",\n");
                        break;
                    case "Country":
                        output.append("      \"Country\": \"" + record.getCountry() + "\",\n");
                        break;
                    case "Address":
                        output.append("      \"Address\": \"" + record.getAddress() + "\",\n");
                        break;
                    case "List":
                        output.append("      \"List\": \"" + record.getList() + "\",\n");
                        break;
                    default:
                        // should not reach here
                        break;
                }
            }
            output.deleteCharAt(output.length() - 2); // remove trailing comma
            output.append("    },\n");
        }
        output.deleteCharAt(output.length() - 2); // remove trailing comma
        output.append("  ]\n}");
    
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String jsonOutput = gson.toJson(gson.fromJson(output.toString(), Object.class));
        System.out.println(jsonOutput);
    
        try {
            String outputFilePath = "output.json";
            FileWriter fileWriter = new FileWriter(outputFilePath);
            gson.toJson(gson.fromJson(output.toString(), Object.class), fileWriter);
            fileWriter.close();
            System.out.println("Output written to " + outputFilePath);
        } catch (IOException e) {
            System.out.println("Error writing output to file: " + e.getMessage());
        }
    }
    
}
